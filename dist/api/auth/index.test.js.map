{"version":3,"sources":["../../../src/api/auth/index.test.js"],"names":["app","user","beforeEach","create","email","password","test","post","query","token","auth","status","body","expect","toBe","id","toBeTruthy","param"],"mappings":"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","file":"index.test.js","sourcesContent":["import request from 'supertest-as-promised'\nimport { masterKey } from '../../config'\nimport { User } from '../user'\nimport { verify } from '../../services/jwt'\nimport express from '../../services/express'\nimport routes from '.'\n\nconst app = () => express(routes)\n\nlet user\n\nbeforeEach(async () => {\n  user = await User.create({ email: 'a@a.com', password: '123456' })\n})\n\ntest('POST /auth 201 (master)', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .query({ token: masterKey })\n    .auth('a@a.com', '123456')\n  expect(status).toBe(201)\n  expect(typeof body).toBe('object')\n  expect(typeof body.token).toBe('string')\n  expect(typeof body.user).toBe('object')\n  expect(body.user.id).toBe(user.id)\n  expect(await verify(body.token)).toBeTruthy()\n})\n\ntest('POST /auth 400 (master) - invalid email', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .query({ token: masterKey })\n    .auth('invalid', '123456')\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('email')\n})\n\ntest('POST /auth 400 (master) - invalid password', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .query({ token: masterKey })\n    .auth('a@a.com', '123')\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('password')\n})\n\ntest('POST /auth 401 (master) - user does not exist', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .query({ token: masterKey })\n    .auth('b@b.com', '123456')\n  expect(status).toBe(401)\n})\n\ntest('POST /auth 401 (master) - wrong password', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .query({ token: masterKey })\n    .auth('a@a.com', '654321')\n  expect(status).toBe(401)\n})\n\ntest('POST /auth 401 (master) - missing token', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .auth('a@a.com', '123456')\n  expect(status).toBe(401)\n})\n\ntest('POST /auth 401 (master) - missing auth', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .query({ token: masterKey })\n  expect(status).toBe(401)\n})\n"]}