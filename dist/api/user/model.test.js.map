{"version":3,"sources":["../../../src/api/user/model.test.js"],"names":["user","beforeEach","create","name","email","password","describe","it","expect","toBe","hash","createHash","update","digest","picture","view","toBeDefined","id","createdAt","toEqual","authenticate"],"mappings":"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","file":"model.test.js","sourcesContent":["import crypto from 'crypto'\nimport { User } from '.'\n\nlet user\n\nbeforeEach(async () => {\n  user = await User.create({ name: 'user', email: 'a@a.com', password: '123456' })\n})\n\ndescribe('set email', () => {\n  it('sets name automatically', () => {\n    user.name = ''\n    user.email = 'test@example.com'\n    expect(user.name).toBe('test')\n  })\n\n  it('sets picture automatically', () => {\n    const hash = crypto.createHash('md5').update(user.email).digest('hex')\n    expect(user.picture).toBe(`https://gravatar.com/avatar/${hash}?d=identicon`)\n  })\n\n  it('changes picture when it is gravatar', () => {\n    user.email = 'b@b.com'\n    const hash = crypto.createHash('md5').update(user.email).digest('hex')\n    expect(user.picture).toBe(`https://gravatar.com/avatar/${hash}?d=identicon`)\n  })\n\n  it('does not change picture when it is already set and is not gravatar', () => {\n    user.picture = 'not_gravatar.jpg'\n    user.email = 'c@c.com'\n    expect(user.picture).toBe('not_gravatar.jpg')\n  })\n})\n\ndescribe('view', () => {\n  it('returns simple view', () => {\n    const view = user.view()\n    expect(view).toBeDefined()\n    expect(view.id).toBe(user.id)\n    expect(view.name).toBe(user.name)\n    expect(view.picture).toBe(user.picture)\n  })\n\n  it('returns full view', () => {\n    const view = user.view(true)\n    expect(view).toBeDefined()\n    expect(view.id).toBe(user.id)\n    expect(view.name).toBe(user.name)\n    expect(view.email).toBe(user.email)\n    expect(view.picture).toBe(user.picture)\n    expect(view.createdAt).toEqual(user.createdAt)\n  })\n})\n\ndescribe('authenticate', () => {\n  it('returns the user when authentication succeed', async () => {\n    expect(await user.authenticate('123456')).toBe(user)\n  })\n\n  it('returns false when authentication fails', async () => {\n    expect(await user.authenticate('blah')).toBe(false)\n  })\n})\n"]}