{"version":3,"sources":["../../../src/api/user/model.js"],"names":["roles","userSchema","email","type","String","match","required","unique","trim","lowercase","password","minlength","name","index","role","enum","default","picture","timestamps","path","set","indexOf","hash","createHash","update","digest","replace","pre","next","isModified","rounds","then","catch","methods","view","full","fields","forEach","field","authenticate","compare","valid","statics","plugin","paths","model","schema"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,QAAQ,CAAC,MAAD,EAAS,OAAT,CAAd;;AAEA,IAAMC,aAAa,qBAAW;AAC5BC,SAAO;AACLC,UAAMC,MADD;AAELC,WAAO,gBAFF;AAGLC,cAAU,IAHL;AAILC,YAAQ,IAJH;AAKLC,UAAM,IALD;AAMLC,eAAW;AANN,GADqB;AAS5BC,YAAU;AACRP,UAAMC,MADE;AAERE,cAAU,IAFF;AAGRK,eAAW;AAHH,GATkB;AAc5BC,QAAM;AACJT,UAAMC,MADF;AAEJS,WAAO,IAFH;AAGJL,UAAM;AAHF,GAdsB;AAmB5BM,QAAM;AACJX,UAAMC,MADF;AAEJW,UAAMf,KAFF;AAGJgB,aAAS;AAHL,GAnBsB;AAwB5BC,WAAS;AACPd,UAAMC,MADC;AAEPI,UAAM;AAFC;AAxBmB,CAAX,EA4BhB;AACDU,cAAY;AADX,CA5BgB,CAAnB;;AAgCAjB,WAAWkB,IAAX,CAAgB,OAAhB,EAAyBC,GAAzB,CAA6B,UAAUlB,KAAV,EAAiB;AAC5C,MAAI,CAAC,KAAKe,OAAN,IAAiB,KAAKA,OAAL,CAAaI,OAAb,CAAqB,sBAArB,MAAiD,CAAtE,EAAyE;AACvE,QAAMC,OAAO,iBAAOC,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCtB,KAAhC,EAAuCuB,MAAvC,CAA8C,KAA9C,CAAb;AACA,SAAKR,OAAL,oCAA8CK,IAA9C;AACD;;AAED,MAAI,CAAC,KAAKV,IAAV,EAAgB;AACd,SAAKA,IAAL,GAAYV,MAAMwB,OAAN,CAAc,WAAd,EAA2B,IAA3B,CAAZ;AACD;;AAED,SAAOxB,KAAP;AACD,CAXD;;AAaAD,WAAW0B,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AAAA;;AACrC,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOD,MAAP;;AAElC;AACA,MAAME,SAAS,gBAAQ,MAAR,GAAiB,CAAjB,GAAqB,CAApC;;AAEA,mBAAOR,IAAP,CAAY,KAAKZ,QAAjB,EAA2BoB,MAA3B,EAAmCC,IAAnC,CAAwC,UAACT,IAAD,EAAU;AAChD,UAAKZ,QAAL,GAAgBY,IAAhB;AACAM;AACD,GAHD,EAGGI,KAHH,CAGSJ,IAHT;AAID,CAVD;;AAYA3B,WAAWgC,OAAX,GAAqB;AACnBC,MADmB,gBACbC,IADa,EACP;AAAA;;AACV,QAAID,OAAO,EAAX;AACA,QAAIE,SAAS,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,CAAb;;AAEA,QAAID,IAAJ,EAAU;AACRC,0DAAaA,MAAb,IAAqB,OAArB,EAA8B,WAA9B;AACD;;AAEDA,WAAOC,OAAP,CAAe,UAACC,KAAD,EAAW;AAAEJ,WAAKI,KAAL,IAAc,OAAKA,KAAL,CAAd;AAA2B,KAAvD;;AAEA,WAAOJ,IAAP;AACD,GAZkB;AAcnBK,cAdmB,wBAcL7B,QAdK,EAcK;AAAA;;AACtB,WAAO,iBAAO8B,OAAP,CAAe9B,QAAf,EAAyB,KAAKA,QAA9B,EAAwCqB,IAAxC,CAA6C,UAACU,KAAD;AAAA,aAAWA,iBAAe,KAA1B;AAAA,KAA7C,CAAP;AACD;AAhBkB,CAArB;;AAmBAxC,WAAWyC,OAAX,GAAqB;AACnB1C;AADmB,CAArB;;AAIAC,WAAW0C,MAAX,6BAAoC,EAAEC,OAAO,CAAC,OAAD,EAAU,MAAV,CAAT,EAApC;;AAEA,IAAMC,QAAQ,mBAASA,KAAT,CAAe,MAAf,EAAuB5C,UAAvB,CAAd;;AAEO,IAAM6C,0BAASD,MAAMC,MAArB;kBACQD,K","file":"model.js","sourcesContent":["import crypto from 'crypto'\nimport bcrypt from 'bcrypt'\nimport mongoose, { Schema } from 'mongoose'\nimport mongooseKeywords from 'mongoose-keywords'\nimport { env } from '../../config'\n\nconst roles = ['user', 'admin']\n\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    match: /^\\S+@\\S+\\.\\S+$/,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  name: {\n    type: String,\n    index: true,\n    trim: true\n  },\n  role: {\n    type: String,\n    enum: roles,\n    default: 'user'\n  },\n  picture: {\n    type: String,\n    trim: true\n  }\n}, {\n  timestamps: true\n})\n\nuserSchema.path('email').set(function (email) {\n  if (!this.picture || this.picture.indexOf('https://gravatar.com') === 0) {\n    const hash = crypto.createHash('md5').update(email).digest('hex')\n    this.picture = `https://gravatar.com/avatar/${hash}?d=identicon`\n  }\n\n  if (!this.name) {\n    this.name = email.replace(/^(.+)@.+$/, '$1')\n  }\n\n  return email\n})\n\nuserSchema.pre('save', function (next) {\n  if (!this.isModified('password')) return next()\n\n  /* istanbul ignore next */\n  const rounds = env === 'test' ? 1 : 9\n\n  bcrypt.hash(this.password, rounds).then((hash) => {\n    this.password = hash\n    next()\n  }).catch(next)\n})\n\nuserSchema.methods = {\n  view (full) {\n    let view = {}\n    let fields = ['id', 'name', 'picture']\n\n    if (full) {\n      fields = [...fields, 'email', 'createdAt']\n    }\n\n    fields.forEach((field) => { view[field] = this[field] })\n\n    return view\n  },\n\n  authenticate (password) {\n    return bcrypt.compare(password, this.password).then((valid) => valid ? this : false)\n  }\n}\n\nuserSchema.statics = {\n  roles\n}\n\nuserSchema.plugin(mongooseKeywords, { paths: ['email', 'name'] })\n\nconst model = mongoose.model('User', userSchema)\n\nexport const schema = model.schema\nexport default model\n"]}