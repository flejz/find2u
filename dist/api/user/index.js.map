{"version":3,"sources":["../../../src/api/user/index.js"],"names":["schema","User","router","tree","email","password","name","picture","role","get","required","roles","post","put","delete"],"mappings":";;;;;;;AAKA;;;;;kBACeA,M;;;;AANf;;AACA;;AACA;;AACA;;AACA;;;;;;QAEOC,I;;;AAEP,IAAMC,SAAS,qBAAf;mBACiD,cAAOC,I;IAAhDC,K,gBAAAA,K;IAAOC,Q,gBAAAA,Q;IAAUC,I,gBAAAA,I;IAAMC,O,gBAAAA,O;IAASC,I,gBAAAA,I;;AAExC;;;;;;;;;;;;AAWAN,OAAOO,GAAP,CAAW,GAAX,EACE,qBAAM,EAAEC,UAAU,IAAZ,EAAkBC,OAAO,CAAC,OAAD,CAAzB,EAAN,CADF,EAEE,2BAFF;;AAKA;;;;;;;;AAQAT,OAAOO,GAAP,CAAW,KAAX,EACE,qBAAM,EAAEC,UAAU,IAAZ,EAAN,CADF;;AAIA;;;;;;;;AAQAR,OAAOO,GAAP,CAAW,MAAX;;AAGA;;;;;;;;;;;;;;;;AAgBAP,OAAOU,IAAP,CAAY,GAAZ,EACE,uBADF,EAEE,yBAAK,EAAER,YAAF,EAASC,kBAAT,EAAmBC,UAAnB,EAAyBC,gBAAzB,EAAkCC,UAAlC,EAAL,CAFF;;AAKA;;;;;;;;;;;;;AAaAN,OAAOW,GAAP,CAAW,MAAX,EACE,qBAAM,EAAEH,UAAU,IAAZ,EAAN,CADF,EAEE,yBAAK,EAAEJ,UAAF,EAAQC,gBAAR,EAAL,CAFF;;AAKA;;;;;;;;;;;AAWAL,OAAOW,GAAP,CAAW,eAAX,EACE,yBADF,EAEE,yBAAK,EAAER,kBAAF,EAAL,CAFF;;AAKA;;;;;;;;;;AAUAH,OAAOY,MAAP,CAAc,MAAd,EACE,qBAAM,EAAEJ,UAAU,IAAZ,EAAkBC,OAAO,CAAC,OAAD,CAAzB,EAAN,CADF;;kBAIeT,M","file":"index.js","sourcesContent":["import { Router } from 'express'\nimport { middleware as query } from 'querymen'\nimport { middleware as body } from 'bodymen'\nimport { password as passwordAuth, master, token } from '../../services/passport'\nimport { index, showMe, show, create, update, updatePassword, destroy } from './controller'\nimport { schema } from './model'\nexport User, { schema } from './model'\n\nconst router = new Router()\nconst { email, password, name, picture, role } = schema.tree\n\n/**\n * @api {get} /users Retrieve users\n * @apiName RetrieveUsers\n * @apiGroup User\n * @apiPermission admin\n * @apiParam {String} token User token.\n * @apiUse listParams\n * @apiSuccess {Object[]} users List of users.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 401 Admin access only.\n */\nrouter.get('/',\n  token({ required: true, roles: ['admin'] }),\n  query(),\n  index)\n\n/**\n * @api {get} /users/me Retrieve current user\n * @apiName RetrieveCurrentUser\n * @apiGroup User\n * @apiPermission user\n * @apiParam {String} token User token.\n * @apiSuccess {Object} user User's data.\n */\nrouter.get('/me',\n  token({ required: true }),\n  showMe)\n\n/**\n * @api {get} /users/:id Retrieve user\n * @apiName RetrieveUser\n * @apiGroup User\n * @apiPermission public\n * @apiSuccess {Object} user User's data.\n * @apiError 404 User not found.\n */\nrouter.get('/:id',\n  show)\n\n/**\n * @api {post} /users Create user\n * @apiName CreateUser\n * @apiGroup User\n * @apiPermission master\n * @apiParam {String} token Master token.\n * @apiParam {String} email User's email.\n * @apiParam {String{6..}} password User's password.\n * @apiParam {String} [name] User's name.\n * @apiParam {String} [picture] User's picture.\n * @apiParam {String=user,admin} [role=user] User's picture.\n * @apiSuccess (Sucess 201) {Object} user User's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 401 Master access only.\n * @apiError 409 Email already registered.\n */\nrouter.post('/',\n  master(),\n  body({ email, password, name, picture, role }),\n  create)\n\n/**\n * @api {put} /users/:id Update user\n * @apiName UpdateUser\n * @apiGroup User\n * @apiPermission user\n * @apiParam {String} token User token.\n * @apiParam {String} [name] User's name.\n * @apiParam {String} [picture] User's picture.\n * @apiSuccess {Object} user User's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 401 Current user or admin access only.\n * @apiError 404 User not found.\n */\nrouter.put('/:id',\n  token({ required: true }),\n  body({ name, picture }),\n  update)\n\n/**\n * @api {put} /users/:id/password Update password\n * @apiName UpdatePassword\n * @apiGroup User\n * @apiHeader {String} Authorization Basic authorization with email and password.\n * @apiParam {String{6..}} password User's new password.\n * @apiSuccess (Success 201) {Object} user User's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 401 Current user access only.\n * @apiError 404 User not found.\n */\nrouter.put('/:id/password',\n  passwordAuth(),\n  body({ password }),\n  updatePassword)\n\n/**\n * @api {delete} /users/:id Delete user\n * @apiName DeleteUser\n * @apiGroup User\n * @apiPermission admin\n * @apiParam {String} token User token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 401 Admin access only.\n * @apiError 404 User not found.\n */\nrouter.delete('/:id',\n  token({ required: true, roles: ['admin'] }),\n  destroy)\n\nexport default router\n"]}