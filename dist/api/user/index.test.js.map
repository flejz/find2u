{"version":3,"sources":["../../../src/api/user/index.test.js"],"names":["app","user1","user2","admin","session1","session2","adminSession","beforeEach","create","name","email","password","role","id","test","get","query","token","status","body","expect","toBe","Array","isArray","page","limit","length","q","fields","toEqual","post","send","param","put","passwordMatch","userId","findById","user","authenticate","auth","delete"],"mappings":"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","file":"index.test.js","sourcesContent":["import request from 'supertest-as-promised'\nimport { masterKey } from '../../config'\nimport { signSync } from '../../services/jwt'\nimport express from '../../services/express'\nimport routes, { User } from '.'\n\nconst app = () => express(routes)\n\nlet user1, user2, admin, session1, session2, adminSession\n\nbeforeEach(async () => {\n  user1 = await User.create({ name: 'user', email: 'a@a.com', password: '123456' })\n  user2 = await User.create({ name: 'user', email: 'b@b.com', password: '123456' })\n  admin = await User.create({ email: 'c@c.com', password: '123456', role: 'admin' })\n  session1 = signSync(user1.id)\n  session2 = signSync(user2.id)\n  adminSession = signSync(admin.id)\n})\n\ntest('GET /users 200 (admin)', async () => {\n  const { status, body } = await request(app())\n    .get('/')\n    .query({ token: adminSession })\n  expect(status).toBe(200)\n  expect(Array.isArray(body)).toBe(true)\n})\n\ntest('GET /users?page=2&limit=1 200 (admin)', async () => {\n  const { status, body } = await request(app())\n    .get('/')\n    .query({ token: adminSession, page: 2, limit: 1 })\n  expect(status).toBe(200)\n  expect(Array.isArray(body)).toBe(true)\n  expect(body.length).toBe(1)\n})\n\ntest('GET /users?q=user 200 (admin)', async () => {\n  const { status, body } = await request(app())\n    .get('/')\n    .query({ token: adminSession, q: 'user' })\n  expect(status).toBe(200)\n  expect(Array.isArray(body)).toBe(true)\n  expect(body.length).toBe(2)\n})\n\ntest('GET /users?fields=name 200 (admin)', async () => {\n  const { status, body } = await request(app())\n    .get('/')\n    .query({ token: adminSession, fields: 'name' })\n  expect(status).toBe(200)\n  expect(Array.isArray(body)).toBe(true)\n  expect(Object.keys(body[0])).toEqual(['id', 'name'])\n})\n\ntest('GET /users 401 (user)', async () => {\n  const { status } = await request(app())\n    .get('/')\n    .query({ token: session1 })\n  expect(status).toBe(401)\n})\n\ntest('GET /users 401', async () => {\n  const { status } = await request(app())\n    .get('/')\n  expect(status).toBe(401)\n})\n\ntest('GET /users/me 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .get('/me')\n    .query({ token: session1 })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.id).toBe(user1.id)\n})\n\ntest('GET /users/me 401', async () => {\n  const { status } = await request(app())\n    .get('/me')\n  expect(status).toBe(401)\n})\n\ntest('GET /users/:id 200', async () => {\n  const { status, body } = await request(app())\n    .get(`/${user1.id}`)\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.id).toBe(user1.id)\n})\n\ntest('GET /users/:id 404', async () => {\n  const { status } = await request(app())\n    .get('/123456789098765432123456')\n  expect(status).toBe(404)\n})\n\ntest('POST /users 201 (master)', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'd@d.com', password: '123456' })\n  expect(status).toBe(201)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('d@d.com')\n})\n\ntest('POST /users 201 (master)', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'd@d.com', password: '123456', role: 'user' })\n  expect(status).toBe(201)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('d@d.com')\n})\n\ntest('POST /users 201 (master)', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'd@d.com', password: '123456', role: 'admin' })\n  expect(status).toBe(201)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('d@d.com')\n})\n\ntest('POST /users 409 (master) - duplicated email', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'a@a.com', password: '123456' })\n  expect(status).toBe(409)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('email')\n})\n\ntest('POST /users 400 (master) - invalid email', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'invalid', password: '123456' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('email')\n})\n\ntest('POST /users 400 (master) - missing email', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, password: '123456' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('email')\n})\n\ntest('POST /users 400 (master) - invalid password', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'd@d.com', password: '123' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('password')\n})\n\ntest('POST /users 400 (master) - missing password', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'd@d.com' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('password')\n})\n\ntest('POST /users 400 (master) - invalid role', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ token: masterKey, email: 'd@d.com', password: '123456', role: 'invalid' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('role')\n})\n\ntest('POST /users 401 (admin)', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .send({ token: adminSession, email: 'd@d.com', password: '123456' })\n  expect(status).toBe(401)\n})\n\ntest('POST /users 401 (user)', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .send({ token: session1, email: 'd@d.com', password: '123456' })\n  expect(status).toBe(401)\n})\n\ntest('POST /users 401', async () => {\n  const { status } = await request(app())\n    .post('/')\n    .send({ email: 'd@d.com', password: '123456' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/me 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .put('/me')\n    .send({ token: session1, name: 'test' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.name).toBe('test')\n})\n\ntest('PUT /users/me 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .put('/me')\n    .send({ token: session1, email: 'test@test.com' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('a@a.com')\n})\n\ntest('PUT /users/me 401', async () => {\n  const { status } = await request(app())\n    .put('/me')\n    .send({ name: 'test' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .put(`/${user1.id}`)\n    .send({ token: session1, name: 'test' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.name).toBe('test')\n})\n\ntest('PUT /users/:id 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .put(`/${user1.id}`)\n    .send({ token: session1, email: 'test@test.com' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('a@a.com')\n})\n\ntest('PUT /users/:id 200 (admin)', async () => {\n  const { status, body } = await request(app())\n    .put(`/${user1.id}`)\n    .send({ token: adminSession, name: 'test' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.name).toBe('test')\n})\n\ntest('PUT /users/:id 401 (user) - another user', async () => {\n  const { status } = await request(app())\n    .put(`/${user1.id}`)\n    .send({ token: session2, name: 'test' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id 401', async () => {\n  const { status } = await request(app())\n    .put(`/${user1.id}`)\n    .send({ name: 'test' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id 404 (admin)', async () => {\n  const { status } = await request(app())\n    .put('/123456789098765432123456')\n    .send({ token: adminSession, name: 'test' })\n  expect(status).toBe(404)\n})\n\nconst passwordMatch = async (password, userId) => {\n  const user = await User.findById(userId)\n  return !!await user.authenticate(password)\n}\n\ntest('PUT /users/me/password 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .put('/me/password')\n    .auth('a@a.com', '123456')\n    .send({ password: '654321' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('a@a.com')\n  expect(await passwordMatch('654321', body.id)).toBe(true)\n})\n\ntest('PUT /users/me/password 400 (user) - invalid password', async () => {\n  const { status, body } = await request(app())\n    .put('/me/password')\n    .auth('a@a.com', '123456')\n    .send({ password: '321' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('password')\n})\n\ntest('PUT /users/me/password 401 (user) - invalid authentication method', async () => {\n  const { status } = await request(app())\n    .put('/me/password')\n    .send({ token: session1, password: '654321' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/me/password 401', async () => {\n  const { status } = await request(app())\n    .put('/me/password')\n    .send({ password: '654321' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id/password 200 (user)', async () => {\n  const { status, body } = await request(app())\n    .put(`/${user1.id}/password`)\n    .auth('a@a.com', '123456')\n    .send({ password: '654321' })\n  expect(status).toBe(200)\n  expect(typeof body).toBe('object')\n  expect(body.email).toBe('a@a.com')\n  expect(await passwordMatch('654321', body.id)).toBe(true)\n})\n\ntest('PUT /users/:id/password 400 (user) - invalid password', async () => {\n  const { status, body } = await request(app())\n    .put(`/${user1.id}/password`)\n    .auth('a@a.com', '123456')\n    .send({ password: '321' })\n  expect(status).toBe(400)\n  expect(typeof body).toBe('object')\n  expect(body.param).toBe('password')\n})\n\ntest('PUT /users/:id/password 401 (user) - another user', async () => {\n  const { status } = await request(app())\n    .put(`/${user1.id}/password`)\n    .auth('b@b.com', '123456')\n    .send({ password: '654321' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id/password 401 (user) - invalid authentication method', async () => {\n  const { status } = await request(app())\n    .put(`/${user1.id}/password`)\n    .send({ token: session1, password: '654321' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id/password 401', async () => {\n  const { status } = await request(app())\n    .put(`/${user1.id}/password`)\n    .send({ password: '654321' })\n  expect(status).toBe(401)\n})\n\ntest('PUT /users/:id/password 404 (user)', async () => {\n  const { status } = await request(app())\n    .put('/123456789098765432123456/password')\n    .auth('a@a.com', '123456')\n    .send({ password: '654321' })\n  expect(status).toBe(404)\n})\n\ntest('DELETE /users/:id 204 (admin)', async () => {\n  const { status } = await request(app())\n    .delete(`/${user1.id}`)\n    .send({ token: adminSession })\n  expect(status).toBe(204)\n})\n\ntest('DELETE /users/:id 401 (user)', async () => {\n  const { status } = await request(app())\n    .delete(`/${user1.id}`)\n    .send({ token: session1 })\n  expect(status).toBe(401)\n})\n\ntest('DELETE /users/:id 401', async () => {\n  const { status } = await request(app())\n    .delete(`/${user1.id}`)\n  expect(status).toBe(401)\n})\n\ntest('DELETE /users/:id 404 (admin)', async () => {\n  const { status } = await request(app())\n    .delete('/123456789098765432123456')\n    .send({ token: adminSession })\n  expect(status).toBe(404)\n})\n"]}