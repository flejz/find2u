{"version":3,"sources":["../../../src/api/characteristics/index.test.js"],"names":["app","userSession","anotherSession","characteristics","beforeEach","create","email","password","user","anotherUser","id","test","post","send","access_token","reference_id","type","which","description","status","body","expect","toBe","toEqual","get","Array","isArray","delete","query"],"mappings":"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","file":"index.test.js","sourcesContent":["import request from 'supertest-as-promised'\nimport { signSync } from '../../services/jwt'\nimport express from '../../services/express'\nimport { User } from '../user'\nimport routes, { Characteristics } from '.'\n\nconst app = () => express(routes)\n\nlet userSession, anotherSession, characteristics\n\nbeforeEach(async () => {\n  const user = await User.create({ email: 'a@a.com', password: '123456' })\n  const anotherUser = await User.create({ email: 'b@b.com', password: '123456' })\n  userSession = signSync(user.id)\n  anotherSession = signSync(anotherUser.id)\n  characteristics = await Characteristics.create({ user })\n})\n\ntest('POST /characteristics 201 (user)', async () => {\n  const { status, body } = await request(app())\n    .post('/')\n    .send({ access_token: userSession, reference_id: 'test', type: 'test', which: 'test', description: 'test' })\n  expect(status).toBe(201)\n  expect(typeof body).toEqual('object')\n  expect(body.reference_id).toEqual('test')\n  expect(body.type).toEqual('test')\n  expect(body.which).toEqual('test')\n  expect(body.description).toEqual('test')\n  expect(typeof body.user).toEqual('object')\n})\n\ntest('POST /characteristics 401', async () => {\n  const { status } = await request(app())\n    .post('/')\n  expect(status).toBe(401)\n})\n\ntest('GET /characteristics 200', async () => {\n  const { status, body } = await request(app())\n    .get('/')\n  expect(status).toBe(200)\n  expect(Array.isArray(body)).toBe(true)\n})\n\ntest('DELETE /characteristics/:id 204 (user)', async () => {\n  const { status } = await request(app())\n    .delete(`/${characteristics.id}`)\n    .query({ access_token: userSession })\n  expect(status).toBe(204)\n})\n\ntest('DELETE /characteristics/:id 401 (user) - another user', async () => {\n  const { status } = await request(app())\n    .delete(`/${characteristics.id}`)\n    .send({ access_token: anotherSession })\n  expect(status).toBe(401)\n})\n\ntest('DELETE /characteristics/:id 401', async () => {\n  const { status } = await request(app())\n    .delete(`/${characteristics.id}`)\n  expect(status).toBe(401)\n})\n\ntest('DELETE /characteristics/:id 404 (user)', async () => {\n  const { status } = await request(app())\n    .delete('/123456789098765432123456')\n    .query({ access_token: anotherSession })\n  expect(status).toBe(404)\n})\n"]}