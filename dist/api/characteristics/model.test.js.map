{"version":3,"sources":["../../../src/api/characteristics/model.test.js"],"names":["user","characteristics","beforeEach","create","email","password","reference_id","type","which","description","describe","it","view","expect","toBe","id","createdAt","toBeTruthy","updatedAt"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA,IAAIA,aAAJ;AAAA,IAAUC,wBAAV;;AAEAC,oFAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI,WAAKC,MAAL,CAAY,EAAEC,OAAO,SAAT,EAAoBC,UAAU,QAA9B,EAAZ,CADJ;;AAAA;AACTL,cADS;AAAA;AAAA,iBAEe,kBAAgBG,MAAhB,CAAuB,EAAEH,UAAF,EAAQM,cAAc,MAAtB,EAA8BC,MAAM,MAApC,EAA4CC,OAAO,MAAnD,EAA2DC,aAAa,MAAxE,EAAvB,CAFf;;AAAA;AAETR,yBAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAX;;AAKAS,SAAS,MAAT,EAAiB,YAAM;AACrBC,KAAG,qBAAH,EAA0B,YAAM;AAC9B,QAAMC,OAAOX,gBAAgBW,IAAhB,EAAb;AACAC,kBAAcD,IAAd,uDAAcA,IAAd,GAAoBE,IAApB,CAAyB,QAAzB;AACAD,WAAOD,KAAKG,EAAZ,EAAgBD,IAAhB,CAAqBb,gBAAgBc,EAArC;AACAF,iCAAcD,KAAKZ,IAAnB,GAAyBc,IAAzB,CAA8B,QAA9B;AACAD,WAAOD,KAAKZ,IAAL,CAAUe,EAAjB,EAAqBD,IAArB,CAA0Bd,KAAKe,EAA/B;AACAF,WAAOD,KAAKN,YAAZ,EAA0BQ,IAA1B,CAA+Bb,gBAAgBK,YAA/C;AACAO,WAAOD,KAAKL,IAAZ,EAAkBO,IAAlB,CAAuBb,gBAAgBM,IAAvC;AACAM,WAAOD,KAAKJ,KAAZ,EAAmBM,IAAnB,CAAwBb,gBAAgBO,KAAxC;AACAK,WAAOD,KAAKH,WAAZ,EAAyBK,IAAzB,CAA8Bb,gBAAgBQ,WAA9C;AACAI,WAAOD,KAAKI,SAAZ,EAAuBC,UAAvB;AACAJ,WAAOD,KAAKM,SAAZ,EAAuBD,UAAvB;AACD,GAZD;;AAcAN,KAAG,mBAAH,EAAwB,YAAM;AAC5B,QAAMC,OAAOX,gBAAgBW,IAAhB,CAAqB,IAArB,CAAb;AACAC,kBAAcD,IAAd,uDAAcA,IAAd,GAAoBE,IAApB,CAAyB,QAAzB;AACAD,WAAOD,KAAKG,EAAZ,EAAgBD,IAAhB,CAAqBb,gBAAgBc,EAArC;AACAF,iCAAcD,KAAKZ,IAAnB,GAAyBc,IAAzB,CAA8B,QAA9B;AACAD,WAAOD,KAAKZ,IAAL,CAAUe,EAAjB,EAAqBD,IAArB,CAA0Bd,KAAKe,EAA/B;AACAF,WAAOD,KAAKN,YAAZ,EAA0BQ,IAA1B,CAA+Bb,gBAAgBK,YAA/C;AACAO,WAAOD,KAAKL,IAAZ,EAAkBO,IAAlB,CAAuBb,gBAAgBM,IAAvC;AACAM,WAAOD,KAAKJ,KAAZ,EAAmBM,IAAnB,CAAwBb,gBAAgBO,KAAxC;AACAK,WAAOD,KAAKH,WAAZ,EAAyBK,IAAzB,CAA8Bb,gBAAgBQ,WAA9C;AACAI,WAAOD,KAAKI,SAAZ,EAAuBC,UAAvB;AACAJ,WAAOD,KAAKM,SAAZ,EAAuBD,UAAvB;AACD,GAZD;AAaD,CA5BD","file":"model.test.js","sourcesContent":["import { Characteristics } from '.'\nimport { User } from '../user'\n\nlet user, characteristics\n\nbeforeEach(async () => {\n  user = await User.create({ email: 'a@a.com', password: '123456' })\n  characteristics = await Characteristics.create({ user, reference_id: 'test', type: 'test', which: 'test', description: 'test' })\n})\n\ndescribe('view', () => {\n  it('returns simple view', () => {\n    const view = characteristics.view()\n    expect(typeof view).toBe('object')\n    expect(view.id).toBe(characteristics.id)\n    expect(typeof view.user).toBe('object')\n    expect(view.user.id).toBe(user.id)\n    expect(view.reference_id).toBe(characteristics.reference_id)\n    expect(view.type).toBe(characteristics.type)\n    expect(view.which).toBe(characteristics.which)\n    expect(view.description).toBe(characteristics.description)\n    expect(view.createdAt).toBeTruthy()\n    expect(view.updatedAt).toBeTruthy()\n  })\n\n  it('returns full view', () => {\n    const view = characteristics.view(true)\n    expect(typeof view).toBe('object')\n    expect(view.id).toBe(characteristics.id)\n    expect(typeof view.user).toBe('object')\n    expect(view.user.id).toBe(user.id)\n    expect(view.reference_id).toBe(characteristics.reference_id)\n    expect(view.type).toBe(characteristics.type)\n    expect(view.which).toBe(characteristics.which)\n    expect(view.description).toBe(characteristics.description)\n    expect(view.createdAt).toBeTruthy()\n    expect(view.updatedAt).toBeTruthy()\n  })\n})\n"]}