{"version":3,"sources":["../../../src/services/passport/index.js"],"names":["password","req","res","next","authenticate","session","err","user","info","param","status","json","end","logIn","master","token","required","roles","indexOf","role","use","email","done","userSchema","tree","validate","findOne","then","catch","console","log","secretOrKey","jwtFromRequest","fromExtractors","fromUrlQueryParameter","fromBodyField","fromAuthHeaderWithScheme","id","findById"],"mappings":"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","file":"index.js","sourcesContent":["import passport from 'passport'\nimport { Schema } from 'bodymen'\nimport { BasicStrategy } from 'passport-http'\nimport { Strategy as BearerStrategy } from 'passport-http-bearer'\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt'\nimport { jwtSecret, masterKey } from '../../config'\nimport User, { schema } from '../../api/user/model'\n\nexport const password = () => (req, res, next) =>\n  passport.authenticate('password', { session: false }, (err, user, info) => {\n    if (err && err.param) {\n      return res.status(400).json(err)\n    } else if (err || !user) {\n      return res.status(401).end()\n    }\n    req.logIn(user, { session: false }, (err) => {\n      if (err) return res.status(401).end()\n      next()\n    })\n  })(req, res, next)\n\nexport const master = () =>\n  passport.authenticate('master', { session: false })\n\nexport const token = ({ required, roles = User.roles } = {}) => (req, res, next) =>\n  passport.authenticate('token', { session: false }, (err, user, info) => {\n\n    if (err || (required && !user) || (required && !~roles.indexOf(user.role))) {\n      return res.status(401).end()\n    }\n    req.logIn(user, { session: false }, (err) => {\n      if (err) return res.status(401).end()\n      next()\n    })\n  })(req, res, next)\n\npassport.use('password', new BasicStrategy((email, password, done) => {\n  const userSchema = new Schema({ email: schema.tree.email, password: schema.tree.password })\n\n  userSchema.validate({ email, password }, (err) => {\n    if (err) done(err)\n  })\n\n  User.findOne({ email }).then((user) => {\n    if (!user) {\n      done(true)\n      return null\n    }\n    return user.authenticate(password, user.password).then((user) => {\n      done(null, user)\n      return null\n    }).catch(done)\n  })\n}))\n\npassport.use('master', new BearerStrategy((token, done) => {\n\n  console.log(token)\n\n  if (token === masterKey) {\n    done(null, {})\n  } else {\n    done(null, false)\n  }\n}))\n\npassport.use('token', new JwtStrategy({\n  secretOrKey: jwtSecret,\n  jwtFromRequest: ExtractJwt.fromExtractors([\n    ExtractJwt.fromUrlQueryParameter('token'),\n    ExtractJwt.fromBodyField('token'),\n    ExtractJwt.fromAuthHeaderWithScheme('Bearer')\n  ])\n}, ({ id }, done) => {\n\n  User.findById(id).then((user) => {\n    done(null, user)\n    return null\n  }).catch(done)\n}))\n"]}